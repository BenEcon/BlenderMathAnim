shader mandelbrot(
    vector uv=(0.,0.,0.),int iterations=20, float cutoff=10.,
   output float val=0., float r=0.)
{
    //convert to polar coordinates from uv-map
    float pi = 3.141592654;
    float theta = uv[1]*pi;
    float phi = 2*uv[0]*pi;
    
    float x = sin(theta)*cos(phi);
    float y = sin(theta)*sin(phi);
    float z = cos(theta);
    
    //stereographic projection onto the complex plane
    float xi = 2.*x/(1.+z);
    float chi= 2.*y/(1.+z);
    
    //apply complex function
    
    float zx=0;
    float zy=0;
    
    int count = 0;
    while(zx*zx+zy*zy<cutoff && count<iterations){
        float tmpx = zx;
        float tmpy = zy;
        
        zx=tmpx*tmpx-tmpy*tmpy+U;
        zy=2*tmpx*tmpy+V;
        
        ++count;
    }
    
    if (count==iterations){
        val = 0.01;
    }
    else{
        float ratio = 1.*count/20;
        val = 1.-(ratio-floor(ratio));
    }
}